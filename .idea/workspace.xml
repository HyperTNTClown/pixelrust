<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="CargoProjects">
    <cargoProject FILE="$PROJECT_DIR$/Cargo.toml" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="cf8aacae-9b81-4c86-a622-7634722ef1d5" name="Changes" comment="Saving to qoi?">
      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main.rs" beforeDir="false" afterPath="$PROJECT_DIR$/src/main.rs" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Rust File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MacroExpansionManager">
    <option name="directoryName" value="hh7cl1y9" />
  </component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="ProjectErrors" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2XI0AsQu0xKGRPFBVLtJNFQ16g9" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/marvin/Projects/pixelrust&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;org.rust.cargo.project.model.PROJECT_DISCOVERY&quot;: &quot;true&quot;,
    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager" selected="Cargo.Run pixelrust">
    <configuration name="Flamegraph pixelrust" type="CargoCommandRunConfiguration" factoryName="Cargo Command">
      <option name="command" value="flamegraph" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="Run pixelrust" type="CargoCommandRunConfiguration" factoryName="Cargo Command">
      <option name="command" value="run --package pixelrust --bin pixelrust" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <configuration name="Test pixelrust" type="CargoCommandRunConfiguration" factoryName="Cargo Command">
      <option name="command" value="test --workspace" />
      <option name="workingDirectory" value="file://$PROJECT_DIR$" />
      <envs />
      <option name="emulateTerminal" value="true" />
      <option name="channel" value="DEFAULT" />
      <option name="requiredFeatures" value="true" />
      <option name="allFeatures" value="false" />
      <option name="withSudo" value="false" />
      <option name="buildTarget" value="REMOTE" />
      <option name="backtrace" value="SHORT" />
      <option name="isRedirectInput" value="false" />
      <option name="redirectInputPath" value="" />
      <method v="2">
        <option name="CARGO.BUILD_TASK_PROVIDER" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Cargo.Flamegraph pixelrust" />
      <item itemvalue="Cargo.Run pixelrust" />
      <item itemvalue="Cargo.Test pixelrust" />
    </list>
  </component>
  <component name="RustProjectSettings">
    <option name="toolchainHomeDirectory" value="$USER_HOME$/.cargo/bin" />
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="cf8aacae-9b81-4c86-a622-7634722ef1d5" name="Changes" comment="" />
      <created>1698301151914</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1698301151914</updated>
      <workItem from="1698301159143" duration="8155000" />
      <workItem from="1698384090913" duration="8646000" />
      <workItem from="1698421752501" duration="17145000" />
      <workItem from="1698559527610" duration="26937000" />
      <workItem from="1698733026268" duration="11022000" />
      <workItem from="1698883304904" duration="790000" />
      <workItem from="1698888509272" duration="1627000" />
      <workItem from="1698938825078" duration="9161000" />
      <workItem from="1699074895882" duration="90000" />
      <workItem from="1699294699956" duration="436000" />
      <workItem from="1700259190494" duration="176000" />
      <workItem from="1701407855517" duration="92000" />
      <workItem from="1701407971235" duration="59000" />
    </task>
    <task id="LOCAL-00001" summary="Add .gitignore, Cargo.lock and Cargo.toml for new Rust project&#10;&#10;Added .gitignore file to exclude unnecessary files from git. Initialised new Rust project with Cargo.toml. This contains project description and dependencies such as Tokio, mjpeg_rs, etc. Also, added Cargo.lock which ensures that multiple builds of the same package will resolve and build identical copies of dependencies.">
      <option name="closed" value="true" />
      <created>1698653124752</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1698653124752</updated>
    </task>
    <task id="LOCAL-00002" summary="Initialize new Rust project with additional checks&#10;&#10;Established a new Rust project and added a .gitignore, Cargo.lock and Cargo.toml files. The .gitignore excludes unnecessary files from git, the Cargo.toml contains the project description and dependencies like Tokio and mjpeg_rs. Additional checks were added in the main.rs to ensure x and y are within the bounds of WIDTH and HEIGHT. Corrections were implemented to the get_pixel and set_pixel functions in pixel_map.rs. This ensures that multiple builds of the same package will resolve and build identical copies of dependencies.">
      <option name="closed" value="true" />
      <created>1698654706381</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1698654706381</updated>
    </task>
    <task id="LOCAL-00003" summary="Don't actually know what I'm doing but it might work?">
      <option name="closed" value="true" />
      <created>1698727726021</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1698727726021</updated>
    </task>
    <task id="LOCAL-00004" summary="We ASYNC">
      <option name="closed" value="true" />
      <created>1698729060871</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1698729060871</updated>
    </task>
    <task id="LOCAL-00005" summary="WE TRANSPARENT">
      <option name="closed" value="true" />
      <created>1698734930104</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1698734930104</updated>
    </task>
    <task id="LOCAL-00006" summary="WE NOW REALLY TRANSPARENT">
      <option name="closed" value="true" />
      <created>1698774477482</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1698774477482</updated>
    </task>
    <task id="LOCAL-00007" summary="I see it workin' I hatin'">
      <option name="closed" value="true" />
      <created>1698776412082</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1698776412082</updated>
    </task>
    <task id="LOCAL-00008" summary="Maybeeee we should not exit fully?">
      <option name="closed" value="true" />
      <created>1698940542674</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1698940542674</updated>
    </task>
    <task id="LOCAL-00009" summary="Saving to qoi?">
      <option name="closed" value="true" />
      <created>1698942174244</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1698942174244</updated>
    </task>
    <option name="localTasksCounter" value="10" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Add .gitignore, Cargo.lock and Cargo.toml for new Rust project&#10;&#10;Added .gitignore file to exclude unnecessary files from git. Initialised new Rust project with Cargo.toml. This contains project description and dependencies such as Tokio, mjpeg_rs, etc. Also, added Cargo.lock which ensures that multiple builds of the same package will resolve and build identical copies of dependencies." />
    <MESSAGE value="Initialize new Rust project with additional checks&#10;&#10;Established a new Rust project and added a .gitignore, Cargo.lock and Cargo.toml files. The .gitignore excludes unnecessary files from git, the Cargo.toml contains the project description and dependencies like Tokio and mjpeg_rs. Additional checks were added in the main.rs to ensure x and y are within the bounds of WIDTH and HEIGHT. Corrections were implemented to the get_pixel and set_pixel functions in pixel_map.rs. This ensures that multiple builds of the same package will resolve and build identical copies of dependencies." />
    <MESSAGE value="Don't actually know what I'm doing but it might work?" />
    <MESSAGE value="We ASYNC" />
    <MESSAGE value="WE TRANSPARENT" />
    <MESSAGE value="WE NOW REALLY TRANSPARENT" />
    <MESSAGE value="I see it workin' I hatin'" />
    <MESSAGE value="Maybeeee we should not exit fully?" />
    <MESSAGE value="Saving to qoi?" />
    <option name="LAST_COMMIT_MESSAGE" value="Saving to qoi?" />
  </component>
</project>